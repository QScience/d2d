<?php
/**
 * @file
 * Hook functions for Patterns integration
 */

function d2d_patterns($data = NULL){
	
	$tags['d2d_public_key'] = array(
    PATTERNS_INFO   => t('Create/Modify/Delete the value pair public key - instance'),
    PATTERNS_CREATE => array('d2d_patterns_save_public_keys'),
    PATTERNS_MODIFY => array('d2d_patterns_save_public_keys'),
    PATTERNS_DELETE => array('d2d_patterns_delete_public_key'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_all_public_keys',
                        ),
  );
  
  
  $tags['d2d_instance'] = array(
    PATTERNS_INFO   => t('Create/Modify/Delete instances'),
    PATTERNS_CREATE => array('taxonomy_form_vocabulary'),
    PATTERNS_MODIFY => array('taxonomy_form_vocabulary'),
    PATTERNS_DELETE => array('taxonomy_vocabulary_confirm_delete'),
    PATTERNS_FILES  => array('modules/taxonomy/taxonomy.admin.inc'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'taxonomy_patterns_export_all_vocs',
                        ),
  );
  
  $tags['d2d_friendship'] = array(
    PATTERNS_INFO   => t('Create/Modify/Delete Taxonomy Vocabularies'),
    PATTERNS_CREATE => array('taxonomy_form_vocabulary'),
    PATTERNS_MODIFY => array('taxonomy_form_vocabulary'),
    PATTERNS_DELETE => array('taxonomy_vocabulary_confirm_delete'),
    PATTERNS_FILES  => array('modules/taxonomy/taxonomy.admin.inc'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'taxonomy_patterns_export_all_vocs',
                        ),
  );
  
  $tags['d2d_group'] = array(
    PATTERNS_INFO   => t('Create/Modify/Delete Taxonomy Vocabularies'),
    PATTERNS_CREATE => array('taxonomy_form_vocabulary'),
    PATTERNS_MODIFY => array('taxonomy_form_vocabulary'),
    PATTERNS_DELETE => array('taxonomy_vocabulary_confirm_delete'),
    PATTERNS_FILES  => array('modules/taxonomy/taxonomy.admin.inc'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'taxonomy_patterns_export_all_vocs',
                        ),
  );
  
  $tags['d2d_permission'] = array(
		PATTERNS_INFO   => t('Create/Modify/Delete Taxonomy Vocabularies'),
	  PATTERNS_CREATE => array('taxonomy_form_vocabulary'),
	  PATTERNS_MODIFY => array('taxonomy_form_vocabulary'),
	  PATTERNS_DELETE => array('taxonomy_vocabulary_confirm_delete'),
	  PATTERNS_FILES  => array('modules/taxonomy/taxonomy.admin.inc'),
	  PATTERNS_EXPORT => array(
	                          PATTERNS_EXPORT_ALL => 'taxonomy_patterns_export_all_vocs',
                        ),
  );
  
  
  return $tags;
  
}


function d2d_patterns_export_all_public_keys($args = NULL, &$result = NULL) {
	$actions = array();
	$action_type = PATTERNS_MODIFY; // pre-init 
	
	if (isset($args['type']) && $args['type'] == PATTERNS_CREATE) {
  	$action_type = PATTERNS_CREATE;
	}
	
  $keys = d2d_api_get_public_keys_array();
  
  foreach ($keys as $k) {
  	$action = array($action_type => array('tag' => 'd2d_public_key', 'd2d_id' => $k['d2d_id'], 'public_key' => $k['public_key']));
  	array_push($actions, $action);
  }
  return $actions;
}


function d2d_patterns_save_public_keys($form_id, $form_state) {
	$instances = d2d_get_instances(TRUE);
	$iid = $instances[$form_state['values']['d2d_id']]['id'];
	$public_key = $form_state['values']['public_key'];
	d2d_api_insert_public_key($iid, $public_key);
}


// Validate the values for an action before running the pattern
function d2d_patterns_validate($action, $tag, &$data) {
 	$result = array();
  $status = PATTERNS_SUCCESS;
  $msg = '';

  // SYNTACTIC VALIDATION
  
  if ($tag == 'd2d_public_key') {
  	
  	$kcheck = patterns_utils_key_exists(array('public_key', 'd2d_id'), $data);
  	  		
  	// It is sufficient to have either vid or machine_name
  	if (!$kcheck['public_key'] || $kcheck['d2d_id']) {
  	
	  	$msg = t("The following mandatory keys are missing for tag %tag: ", array('%tag' => $tag));
	  	foreach ($kcheck as $key => $exist) {
				if (!$exist) {
					$status = PATTERNS_ERR;
					$msg .= $key . ', ';
				} 
	  	}
  		$msg = substr($msg, 0, -2);
  	}
  }
  
  if ($status == PATTERNS_ERR) {
  	return patterns_results($status, $msg);	
  }
  
  // SEMANTIC VALIDATION
  
  if ($tag == 'd2d_public_key') {
  	
  	$d2d_id = $data['d2d_id'];
  	$public_key = $data['public_key'];
  	$public_key_short =  '...' . d2d_substr_public_key($public_key);
  	
  	$keys = d2d_api_get_public_keys_array($d2d_id);
  	$instances = d2d_get_instances(TRUE);
  
  	$instance = d2d_get_instance_by_d2d_id($d2d_id);
  	
  	if ($instance === FALSE) {
  		$result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => 
        	t('No instance associated with key %k found.', array('%k' => $data['d2d_id'],)));
  	}
  	else {
  		
  		// Is the public key already assigned to the instance?
  		$instance_has_already_key = d2d_api_public_key_exist($d2d_id, $public_key);
  		
  		
  		if ($action == PATTERNS_CREATE) {
  		
  	 		if ($instance_has_already_key) {
      		$result[] = array(PATTERNS_WARNING_ALREADY_DEFINED_ELEMENT => 
        		t('Instance %i has already public key %k.', array('%i' => $d2d_id, '%k' => $public_key_short,)));
      	}
  		}
  		else { // DELETE AND MODIFY
  		
  			if (!$instance_has_already_key) {
      		$result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => 
        		t('Instance %i has no key %k.', array('%i' => $d2d_id, '%k' => $public_key_short,)));
      	}
  		
  		}
  	}
  } 
  	
  return patterns_results($status, $msg, $result);	
   
}