<?php
/**
 * @file
 * Hook functions for Patterns integration
 */

function d2d_patterns($data = NULL){
	
	$tags['d2d_public_key'] = array(
    PATTERNS_INFO   => t('Create/Modify/Delete the value pair public key - instance'),
    PATTERNS_CREATE => array('d2d_patterns_insert_public_keys'),
    PATTERNS_MODIFY => array('d2d_patterns_update_public_keys'),
    PATTERNS_DELETE => array('d2d_patterns_delete_public_keys'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_all_public_keys',
                        ),
  );
  
  $tags['d2d_own_keys'] = array(
    PATTERNS_INFO   => t('Create/Modify/Delete public and or private key for the own instance. Must be called after a D2D id is set.'),
    PATTERNS_CREATE => array('d2d_patterns_insert_own_keys'),
    PATTERNS_MODIFY => array('d2d_patterns_insert_own_keys'),
    PATTERNS_DELETE => array('d2d_patterns_delete_own_keys'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_own_keys',
                          'Only the public key' => 'd2d_patterns_export_own_public_key',
                        ),
  );
  
  $tags['d2d_instance'] = array(
    PATTERNS_INFO   => t('Create/Modify/Delete D2D instances.'),
    PATTERNS_CREATE => array('d2d_form_add_instance'),
    PATTERNS_MODIFY => array('d2d_edit_instance_details'),
    PATTERNS_DELETE => array('d2d_edit_instance_details'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_all_instances',
                          'Friends only' => 'd2d_patterns_export_all_friends'
                        ),
  );
  
  $tags['d2d_friendship'] = array(
    PATTERNS_INFO   => t('Establish or remove a friendship'),
//     PATTERNS_CREATE => array('d2d_'),
//     PATTERNS_MODIFY => array('taxonomy_form_vocabulary'),
//     PATTERNS_DELETE => array('taxonomy_vocabulary_confirm_delete'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_all_friendships',
                        ),
  );
  
  $tags['d2d_group'] = array(
    PATTERNS_INFO   => t('Create/Modify/Delete D2D groups'),
    PATTERNS_CREATE => array('d2d_form_add_group'),
    PATTERNS_MODIFY => array('d2d_patterns_edit_group'),
    PATTERNS_DELETE => array('d2d_patterns_delete_group'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_all_groups',
                        ),
  );
  
  $tags['d2d_permission'] = array(
		PATTERNS_INFO   => t('Create/Modify/Delete Taxonomy Vocabularies'),
	  PATTERNS_CREATE => array('taxonomy_form_vocabulary'),
	  PATTERNS_MODIFY => array('taxonomy_form_vocabulary'),
	  PATTERNS_DELETE => array('taxonomy_vocabulary_confirm_delete'),
	  PATTERNS_FILES  => array('modules/taxonomy/taxonomy.admin.inc'),
	  PATTERNS_EXPORT => array(
	                          PATTERNS_EXPORT_ALL => 'taxonomy_patterns_export_all_vocs',
                        ),
  );
  
  
  return $tags;
  
}

function d2d_patterns_edit_group($form_id, $form_state) {
  $group = $form_state['values']['d2d_group'];
  d2d_api_group_edit($group['id'], $group['name'], $group['description'], $group['default']);
}

function d2d_patterns_delete_group($form_id, $form_state) {
  $group = $form_state['values']['d2d_group'];
  d2d_api_group_delete($group['id']);
}

function d2d_patterns_insert_own_keys($form_id, $form_state) {
	if (isset($form_state['values']['d2d_own_keys']['public'])) {
		d2d_api_own_public_key_set($form_state['values']['d2d_own_keys']['public']);
	}
	if (isset($form_state['values']['d2d_own_keys']['private'])) {
		d2d_api_own_private_key_set($form_state['values']['d2d_own_keys']['private']);
	}
}

function d2d_patterns_delete_own_keys($form_id, $form_state) {
	if (isset($form_state['values']['d2d_own_keys']['public'])) {
		d2d_api_own_public_key_del($form_state['values']['d2d_own_keys']['public']);
	}
	if (isset($form_state['values']['d2d_own_keys']['private'])) {
		d2d_api_own_private_key_del($form_state['values']['d2d_own_keys']['private']);
	}
}

function d2d_patterns_export_own_keys($args = NULL, &$result = NULL) {

	$action_type = PATTERNS_MODIFY;
	if (isset($args['type']) && $args['type'] == PATTERNS_CREATE) {
  	$action_type = PATTERNS_CREATE;
	}
	
	$keys = array($action_type => array(
		'tag' => 'd2d_own_keys',
		'public' => d2d_api_own_public_key_get(),
		'private' => d2d_api_own_private_key_get(),
	));
  
  return $keys;
}

function d2d_patterns_export_all_friendships($args = NULL, &$result = NULL) {
  $action_type = PATTERNS_CREATE; // either create or delete
  
  $instances = d2d_api_instance_get();
  $actions = array();
  foreach ($instances as $i) {
    $action = array($action_type => array(
        'tag' => 'd2d_friendship',
        'd2d_id' => $i['d2d_id'],
    ));
    if ($action_type == PATTERNS_MODIFY) {
    		$action[$action_type]['id'] = $i['id'];
    }
    array_push($actions, $action);
  }
  return $actions;
}

function d2d_patterns_export_all_groups($args = NULL, &$result = NULL) {
  $action_type = isset($args['type']) ? $args['type'] : PATTERNS_CREATE;

  $instances = d2d_api_group_get();
  $actions = array();
  foreach ($instances as $i) {
    $action = array($action_type => array(
        'tag' => 'd2d_group',
        'name' => $i['name'],
        'description' => $i['description'],
        'default' => $i['auto_member'],
    ));
    if ($action_type == PATTERNS_MODIFY) {
    		$action[$action_type]['id'] = $i['id'];
    }
    array_push($actions, $action);
  }
  return $actions;
}


function _d2d_patterns_export_instances($args, &$result, $friends_only) {
  $action_type = PATTERNS_MODIFY;
  if (isset($args['type']) && $args['type'] == PATTERNS_CREATE) {
    $action_type = PATTERNS_CREATE;
  }
  
  $instances = $friends_only ? d2d_api_friend_get() : d2d_api_instance_get();
  $actions = array();
  foreach ($instances as $i) {
    $action = array($action_type => array(
        'tag' => 'd2d_instance',
        'd2d_id' => $i['d2d_id'],
        'url' => $i['url'],
        'name' => $i['name'],
        'description' => $i['description'],
    ));
    if ($action_type == PATTERNS_MODIFY) {
    		$action[$action_type]['id'] = $i['id'];
    }
    array_push($actions, $action);
  }
  return $actions;
}

function d2d_patterns_export_all_instances($args = NULL, &$result = NULL) {
  return _d2d_patterns_export_instances($args, $result, FALSE);
}

function d2d_patterns_export_all_friends($args = NULL, &$result = NULL) {
  return _d2d_patterns_export_instances($args, $result, TRUE);
}

function d2d_patterns_export_own_public_key($args = NULL, &$result = NULL) {
	$actions = array();
	$action_type = PATTERNS_MODIFY; // pre-init
	
	if (isset($args['type']) && $args['type'] == PATTERNS_CREATE) {
  	$action_type = PATTERNS_CREATE;
	}
	
	$keys = array($action_type => array(
		'tag' => 'd2d_own_keys',
		'public' => d2d_api_own_public_key_get(),
	));
  
  return $keys;
}

function d2d_patterns_export_all_public_keys($args = NULL, &$result = NULL) {
	$actions = array();
	$action_type = PATTERNS_MODIFY; // pre-init 
	
	if (isset($args['type']) && $args['type'] == PATTERNS_CREATE) {
  	$action_type = PATTERNS_CREATE;
	}
	
  $keys = d2d_api_public_key_get();
  
  foreach ($keys as $k) {
    $k = get_object_vars($k);
  	$action = array($action_type => array('tag' => 'd2d_public_key', 'd2d_id' => $k['d2d_id'], 'public_key' => $k['public_key']));
  	if ($action_type == PATTERNS_MODIFY) {
  		$action[$action_type]['id'] = $k['id'];
  	}
  	array_push($actions, $action);
  }
  return $actions;
}


function d2d_patterns_insert_public_keys($form_id, $form_state) {
	$d2d_id = $form_state['values']['d2d_id'];
	$public_key = $form_state['values']['public_key'];
	d2d_api_public_key_set($d2d_id, $public_key);
}

function d2d_patterns_update_public_keys($form_id, $form_state) {
	$update = array();
	if (isset($form_state['values']['d2d_id'])) {
		$keys = d2d_api_public_key_get($form_state['values']['d2d_id']);
		$update['instance_id'] = $keys[0]->id;
	}
	if (isset($form_state['values']['public_key'])) {
		$update['public_key'] = $form_state['values']['public_key'];
	} 
	d2d_api_public_key_update($form_state['values']['id'], $update);
}

function d2d_patterns_delete_public_keys($form_id, $form_state) {
	if (!isset($form_state['values']['id'])) {
		$id = d2d_api_public_key_return_id($form_state['values']['d2d_id'], $form_state['values']['public_key']);
	}
	else {
		$id = $form_state['values']['id'];
	}
	d2d_api_public_key_delete($id);
}

// Validate the values for an action before running the pattern
function d2d_patterns_validate($action, $tag, &$data) {
 	$result = array();
  $status = PATTERNS_SUCCESS;
  $msg = '';
  
  // SYNTACTIC VALIDATION
  
  if ($tag == 'd2d_public_key') {
  	
  	if ($action == PATTERNS_CREATE) {
  	  $kcheck = array();
   	  $kcheck[] = array('mandatory' => array('public_key', 'd2d_id'), );
  	  
	    $status = patterns_utils_check_keys($data, $kcheck, $msg);
  	}
  	
  	else if ($action == PATTERNS_MODIFY) {
  	  
  	  $kcheck = array();
  	  $kcheck[] = array('mandatory' => array('id'), );
  	  $kcheck[] = array('at_least_one' => array('public_key', 'd2d_id'), );
  	  $status = patterns_utils_check_keys($data, $kcheck, $msg);
  	}
    
  	else { // PATTERNS_DELETE
  		$kcheck = patterns_utils_key_exists(array('public_key', 'd2d_id', 'id'), $data);
  		
  		// Either the id or the combination d2d_id public_key
  		if (!$kcheck['id'] && !($kcheck['public_key'] && $kcheck['d2d_id'])) {

  			$msg = t("Either the 'id' attribute or the combination 'public_key' and 'd2d_id' is required");
  			$status = PATTERNS_ERR;
  		}
  		
  	}
  }
  
  else if ($tag = 'd2d_instance') {
  	if ($action == PATTERNS_CREATE) {
  	  
  	  $kcheck = array();
  	  $kcheck[] = array('mandatory' => array('id', 'd2d_id', 'address'), );
  	  $status = patterns_utils_check_keys($data, $kcheck, $msg);
  	  
  	}
  	else if ($action == PATTERNS_MODIFY) {  
  		$kcheck = array();
  	  $kcheck[] = array('mandatory' => array('id'), );
  	  $kcheck[] = array('at_least_one' => array('public_key', 'd2d_id'), );
  	  $status = patterns_utils_check_keys($data, $kcheck, $msg);
  	}
  	
  	else { // PATTERNS_DELETE
  		$kcheck = patterns_utils_key_exists(array('public_key', 'd2d_id', 'id'), $data);
  		
  		// Either the id or the combination d2d_id public_key
  		if (!$kcheck['id'] && !($kcheck['public_key'] && $kcheck['d2d_id'])) {

  			$msg = t("Either the 'id' attribute or the combination 'public_key' and 'd2d_id' is required");
  			$status = PATTERNS_ERR;
  		}
  		
  	}
  }
  
  
  if ($status == PATTERNS_ERR) {
  	return patterns_results($status, $msg);	
  }
  
  // SEMANTIC VALIDATION
  
  if ($tag == 'd2d_public_key') {
  	$d2d_id = @$data['d2d_id'];
  	$public_key = @$data['public_key'];
  	$public_key_short =  '...' . @d2d_substr_public_key($public_key);
  	
  	// $keys = @d2d_api_public_key_get($d2d_id);
  	
  	if ($action == PATTERNS_CREATE) {  
  		
  		$instance = d2d_api_instance_get($d2d_id);

  		if ($instance === FALSE) {
  			$result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => 
        	t('No instance associated with key %k found.', array('%k' => $data['d2d_id'],)));
  		}
  		else if (d2d_api_public_key_exist($d2d_id, $public_key)) {
				$result[] = array(PATTERNS_WARNING_ALREADY_DEFINED_ELEMENT => 
        	t('Instance %i has already public key %k.', array('%i' => $d2d_id, '%k' => $public_key_short,)));
  		}
  	}
  	
  	else if ($action == PATTERNS_MODIFY) {  
  		$id = $data['id'];
  		// modify by id	
  		$key = d2d_api_public_key_get_by_id($id);
  			
  		if (empty($key)) {
  			$result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => 
        	t('No public key to modify with \'id\' :id', array(':id' => $id,)));
  		}	
  	}	
  	
  	else { // PATTERS_DELETE
  		// delete by id	
  		if (isset($data['id'])) {
  			$id = $data['id'];
  			$key = d2d_api_public_key_get_by_id($id);
  			
  			if (empty($key)) {
  				$result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => 
        		t('No public key to modify with \'id\' :id', array(':id' => $id,)));
  			}	
  		}
  		// pub_key and d2d_id are set
  		else if (!d2d_api_public_key_exist($d2d_id, $public_key)) { 
  			$result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => 
        		t('The pair instance-public key (%i-%k) was not found.', array('%i' => $d2d_id, '%k' => $public_key_short,)));
  		}	
  	}
  	
  }
  	
  return patterns_results($status, $msg, $result);	
   
}
