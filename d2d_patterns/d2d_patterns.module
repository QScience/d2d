<?php
/**
 * @file
 * Hook functions for Patterns integration
 */


function d2d_patterns($data = NULL){
	
	$tags['d2d_public_key'] = array(
    PATTERNS_INFO   => t('Create, modify, and delete the value pair public key - instance'),
    PATTERNS_CREATE => array('d2d_patterns_insert_public_keys'),
    PATTERNS_MODIFY => array('d2d_patterns_update_public_keys'),
    PATTERNS_DELETE => array('d2d_patterns_delete_public_keys'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_all_public_keys',
                        ),
  );
  
  $tags['d2d_own_keys'] = array(
    PATTERNS_INFO   => t('Create, modify, and delete public and or private key for the own instance. Must be called after a D2D id is set.'),
    PATTERNS_CREATE => array('d2d_patterns_insert_own_keys'),
    PATTERNS_MODIFY => array('d2d_patterns_insert_own_keys'),
    PATTERNS_DELETE => array('d2d_patterns_delete_own_keys'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_own_keys',
                          'Only the public key' => 'd2d_patterns_export_own_public_key',
                        ),
  );
  
  $tags['d2d_instance'] = array(
    PATTERNS_INFO   => t('Create, modify, and delete  D2D instances.'),
    PATTERNS_CREATE => array('d2d_form_add_instance'),
    PATTERNS_MODIFY => array('d2d_edit_instance_details'),
    PATTERNS_DELETE => array('d2d_edit_instance_details'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_all_instances',
                          'Friends only' => 'd2d_patterns_export_all_friends'
                        ),
  );
  
  $tags['d2d_friendship'] = array(
    PATTERNS_INFO   => t('Establish or remove a friendship'),
    PATTERNS_CREATE => array('d2d_patterns_friendship_send'),
    //PATTERNS_MODIFY => array('d2d_patterns_friendship_send'), invalid
    PATTERNS_DELETE => array('d2d_patterns_friendship_send'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_all_friendships',
                        ),
  );
  
  $tags['d2d_group'] = array(
    PATTERNS_INFO   => t('Create, modify, and delete D2D groups'),
    PATTERNS_CREATE => array('d2d_form_add_group'),
    PATTERNS_MODIFY => array('d2d_patterns_edit_group'),
    PATTERNS_DELETE => array('d2d_patterns_delete_group'),
    PATTERNS_EXPORT => array(
                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_all_groups',
                        ),
  );

  $tags['d2d_permission'] = array(
		PATTERNS_INFO   => t('Create, modify, and delete D2D permissions'),
	  PATTERNS_CREATE => array('d2d_patterns_add_permission'),
	  PATTERNS_MODIFY => array('d2d_patterns_edit_permission'),
	  PATTERNS_DELETE => array('d2d_patterns_delete_permission'),
	  PATTERNS_EXPORT => array(
	                          PATTERNS_EXPORT_ALL => 'd2d_patterns_export_all_permissions',
                        ),
  );
  
  
  return $tags;
  
}


//////////////
// PERMISSIONS
//////////////

function d2d_patterns_export_all_permissions($args = NULL, &$result = NULL) {
  $action_type = isset($args['type']) ? $args['type'] : PATTERNS_CREATE;

  $groups = d2d_api_group_get();
  $permissions = d2d_api_permission_get();
  $actions = array();
  foreach ($permissions as $p) {
    $action = array($action_type => array(
        'tag' => 'd2d_permission',
        'group' => $groups[$p['group_id']]['name'],
        'method' => $p['method'],
    ));
    array_push($actions, $action);
  }
  return $actions;
}

function d2d_patterns_edit_permission($form_id, $form_state) {
  $permissions = $form_state['values']['d2d_permission'];
  d2d_api_permission_add($permissions);
}

function d2d_patterns_delete_permission($form_id, $form_state) {
  $group = $form_state['values']['d2d_permission'];
  d2d_api_group_edit($group['id'], $group['name'], $group['description'], $group['default']);
}

function d2d_patterns_add_permission($form_id, $form_state) {
  $group = $form_state['values']['d2d_permission'];
  d2d_api_group_edit($group['id'], $group['name'], $group['description'], $group['default']);
}


//////////
// GROUPS
/////////


function d2d_patterns_export_all_groups($args = NULL, &$result = NULL) {
  $action_type = isset($args['type']) ? $args['type'] : PATTERNS_CREATE;

  $instances = d2d_api_group_get();
  $actions = array();
  foreach ($instances as $i) {
    $action = array($action_type => array(
        'tag' => 'd2d_group',
        'name' => $i['name'],
        'description' => $i['description'],
        'default' => $i['auto_member'],
    ));
    if ($action_type == PATTERNS_MODIFY) {
    		$action[$action_type]['id'] = $i['id'];
    }
    array_push($actions, $action);
  }
  return $actions;
}

function d2d_patterns_edit_group($form_id, $form_state) {
  $group = $form_state['values']['d2d_group'];
  d2d_api_group_edit($group['id'], $group['name'], $group['description'], $group['default']);
}

function d2d_patterns_delete_group($form_id, $form_state) {
  $group = $form_state['values']['d2d_group'];
  d2d_api_group_delete($group['id']);
}

////////////
// OWN KEYS
////////////


function d2d_patterns_export_own_public_key($args = NULL, &$result = NULL) {
  $actions = array();
  $action_type = PATTERNS_MODIFY; // pre-init

  if (isset($args['type']) && $args['type'] == PATTERNS_CREATE) {
    $action_type = PATTERNS_CREATE;
  }

  $keys = array($action_type => array(
      'tag' => 'd2d_own_keys',
      'public' => d2d_api_own_public_key_get(),
  ));

  return $keys;
}

function d2d_patterns_export_own_keys($args = NULL, &$result = NULL) {

  $action_type = PATTERNS_MODIFY;
  if (isset($args['type']) && $args['type'] == PATTERNS_CREATE) {
    $action_type = PATTERNS_CREATE;
  }

  $keys = array($action_type => array(
      'tag' => 'd2d_own_keys',
      'public' => d2d_api_own_public_key_get(),
      'private' => d2d_api_own_private_key_get(),
  ));

  return $keys;
}

function d2d_patterns_insert_own_keys($form_id, $form_state) {
	if (isset($form_state['values']['d2d_own_keys']['public'])) {
		d2d_api_own_public_key_set($form_state['values']['d2d_own_keys']['public']);
	}
	if (isset($form_state['values']['d2d_own_keys']['private'])) {
		d2d_api_own_private_key_set($form_state['values']['d2d_own_keys']['private']);
	}
}

function d2d_patterns_delete_own_keys($form_id, $form_state) {
	if (isset($form_state['values']['d2d_own_keys']['public'])) {
		d2d_api_own_public_key_del($form_state['values']['d2d_own_keys']['public']);
	}
	if (isset($form_state['values']['d2d_own_keys']['private'])) {
		d2d_api_own_private_key_del($form_state['values']['d2d_own_keys']['private']);
	}
}


////////////////
// FRIENDSHIPS
///////////////

function d2d_patterns_export_all_friendships($args = NULL, &$result = NULL) {
  $action_type = PATTERNS_CREATE; // either create or delete
  
  $instances = d2d_api_instance_get();
  $actions = array();
  foreach ($instances as $i) {
    $action = array($action_type => array(
        'tag' => 'd2d_friendship',
        'd2d_id' => $i['d2d_id'],
    ));
    if ($action_type == PATTERNS_MODIFY) {
    		$action[$action_type]['id'] = $i['id'];
    }
    array_push($actions, $action);
  }
  return $actions;
}

function d2d_patterns_friendship_send($form_id, $form_state) {
  $id = $form_state['values']['instance_id'];
  $state = $form_state['values']['state'];
  $old_friendship_state = $form_state['values']['old_friendship_state'];
  d2d_api_friendship_update($id, $state, $old_friendship_state, d2d_api_own_instance_id_get());
  d2d_api_friendship_send($id, TRUE, 1, FALSE);
}


/////////////
// INSTANCES
/////////////

function _d2d_patterns_export_instances($args, &$result, $friends_only) {
  $action_type = PATTERNS_MODIFY;
  if (isset($args['type']) && $args['type'] == PATTERNS_CREATE) {
    $action_type = PATTERNS_CREATE;
  }
  
  $instances = $friends_only ? d2d_api_friend_get() : d2d_api_instance_get();
  $actions = array();
  foreach ($instances as $i) {
    $action = array($action_type => array(
        'tag' => 'd2d_instance',
        'd2d_id' => $i['d2d_id'],
        'url' => $i['url'],
        'name' => $i['name'],
        'description' => $i['description'],
    ));
    if ($action_type == PATTERNS_MODIFY) {
    		$action[$action_type]['id'] = $i['id'];
    }
    array_push($actions, $action);
  }
  return $actions;
}

function d2d_patterns_export_all_instances($args = NULL, &$result = NULL) {
  return _d2d_patterns_export_instances($args, $result, FALSE);
}

function d2d_patterns_export_all_friends($args = NULL, &$result = NULL) {
  return _d2d_patterns_export_instances($args, $result, TRUE);
}


///////////////
// PUBLIC KEYS
///////////////

function d2d_patterns_export_all_public_keys($args = NULL, &$result = NULL) {
	$actions = array();
	$action_type = PATTERNS_MODIFY; // pre-init 
	
	if (isset($args['type']) && $args['type'] == PATTERNS_CREATE) {
  	$action_type = PATTERNS_CREATE;
	}
	
  $keys = d2d_api_public_key_get();
  
  foreach ($keys as $k) {
    $k = get_object_vars($k);
  	$action = array($action_type => array('tag' => 'd2d_public_key', 'd2d_id' => $k['d2d_id'], 'public_key' => $k['public_key']));
  	if ($action_type == PATTERNS_MODIFY) {
  		$action[$action_type]['id'] = $k['id'];
  	}
  	array_push($actions, $action);
  }
  return $actions;
}


function d2d_patterns_insert_public_keys($form_id, $form_state) {
	$d2d_id = $form_state['values']['d2d_id'];
	$public_key = $form_state['values']['public_key'];
	d2d_api_public_key_set($d2d_id, $public_key);
}

function d2d_patterns_update_public_keys($form_id, $form_state) {
	$update = array();
	if (isset($form_state['values']['d2d_id'])) {
		$keys = d2d_api_public_key_get($form_state['values']['d2d_id']);
		$update['instance_id'] = $keys[0]->id;
	}
	if (isset($form_state['values']['public_key'])) {
		$update['public_key'] = $form_state['values']['public_key'];
	} 
	d2d_api_public_key_update($form_state['values']['id'], $update);
}

function d2d_patterns_delete_public_keys($form_id, $form_state) {
	if (!isset($form_state['values']['id'])) {
		$id = d2d_api_public_key_return_id($form_state['values']['d2d_id'], $form_state['values']['public_key']);
	}
	else {
		$id = $form_state['values']['id'];
	}
	d2d_api_public_key_delete($id);
}


///////////////////
// PATTERNS HOOKS
///////////////////

function d2d_patterns_prepare($action, $tag, &$data) {
  if ($tag == 'd2d_permission') {
    if (!isset($data['group_id']) && isset($data['group'])) {
      $group = d2d_api_group_get_by_name($data['group']);
      $data['group_id'] = is_null($group) ? NULL : $group['id'];
    }
  }
  
  if ($tag == 'd2d_friendship') {
    if (!isset($data['instance_id']) && isset($data['d2d_id'])) {
      $instance = d2d_api_instance_get_by_name($data['d2d_id']);
      if ($instance != FALSE) {
        $data['instance_id'] = $instance['id'];
        $data['old_friendship_state'] = $instance['friendship_state'];
        $data['is_friend'] = $instance['is_friend'];
        
        
        if ($action == PATTERNS_CREATE) {
          $data['state'] = 1;
        }
        else if ($action == PATTERNS_DELETE) {
          $data['state'] = 0;
        }
        
      }
      else {
        $data['instance_id'] = FALSE;
      }
    }
  }
  
}

// Validate the values for an action before running the pattern
function d2d_patterns_validate($action, $tag, &$data) {
 	$result = array();
  $status = PATTERNS_SUCCESS;
  $msg = '';
  
  // SYNTACTIC VALIDATION
  
  if ($tag == 'd2d_public_key') {
  	
  	if ($action == PATTERNS_CREATE) {
  	  $kcheck = array();
   	  $kcheck[] = array('mandatory' => array('public_key', 'd2d_id'), );
  	  
	    $status = patterns_utils_check_keys($data, $kcheck, $msg);
  	}
  	
  	else if ($action == PATTERNS_MODIFY) {
  	  
  	  $kcheck = array();
  	  $kcheck[] = array('mandatory' => array('id'), );
  	  $kcheck[] = array('at_least_one' => array('public_key', 'd2d_id'), );
  	  $status = patterns_utils_check_keys($data, $kcheck, $msg);
  	}
    
  	else { // PATTERNS_DELETE
  		$kcheck = patterns_utils_key_exists(array('public_key', 'd2d_id', 'id'), $data);
  		
  		// Either the id or the combination d2d_id public_key
  		if (!$kcheck['id'] && !($kcheck['public_key'] && $kcheck['d2d_id'])) {

  			$msg = t("Either the 'id' attribute or the combination 'public_key' and 'd2d_id' is required");
  			$status = PATTERNS_ERR;
  		}
  		
  	}
  }
  
  else if ($tag == 'd2d_own_keys') {
    $kcheck = array();
    $kcheck[] = array('at_least_one' => array('public', 'private'), );  
    $status = patterns_utils_check_keys($data, $kcheck, $msg);
  }
  
  else if ($tag == 'd2d_instance') {
  	if ($action == PATTERNS_CREATE) {
  	  
  	  $kcheck = array();
  	  $kcheck[] = array('mandatory' => array('id', 'd2d_id', 'address'), );
  	  $status = patterns_utils_check_keys($data, $kcheck, $msg);
  	  
  	}
  	else if ($action == PATTERNS_MODIFY) {  
  		$kcheck = array();
  	  $kcheck[] = array('mandatory' => array('id'), );
  	  $kcheck[] = array('at_least_one' => array('public_key', 'd2d_id'), );
  	  $status = patterns_utils_check_keys($data, $kcheck, $msg);
  	}
  	
  	else { // PATTERNS_DELETE
  		$kcheck = patterns_utils_key_exists(array('public_key', 'd2d_id', 'id'), $data);
  		
  		// Either the id or the combination d2d_id public_key
  		if (!$kcheck['id'] && !($kcheck['public_key'] && $kcheck['d2d_id'])) {

  			$msg = t("Either the 'id' attribute or the combination 'public_key' and 'd2d_id' is required");
  			$status = PATTERNS_ERR;
  		}
  		
  	}
  }
  
  else if ($tag == 'd2d_group') {
    if ($action == PATTERNS_CREATE) {
      	
      $kcheck = array();
      $kcheck[] = array('mandatory' => array('name', 'description'), );
      $status = patterns_utils_check_keys($data, $kcheck, $msg);
      	
    }
    else if ($action == PATTERNS_MODIFY) {
      
  		$kcheck = array();
  		$kcheck[] = array('mandatory' => array('id'), );
  		$kcheck[] = array('at_least_one' => array('name', 'description', 'default'), );
  		$status = patterns_utils_check_keys($data, $kcheck, $msg);
    }
     
    else { // PATTERNS_DELETE
      $kcheck = array();
      $kcheck[] = array('mandatory' => array('id'), );
      $status = patterns_utils_check_keys($data, $kcheck, $msg);
    }
  }
  
  else if ($tag == 'd2d_permission') {
      	
    $kcheck = array();
    $kcheck[] = array('mandatory' => array('method', 'group'), );
    $status = patterns_utils_check_keys($data, $kcheck, $msg);
  }
  
  else if ($tag == 'd2d_friendship') {

    if ($action == PATTERNS_MODIFY) {
      $status = PATTERNS_ERROR;
      $msg = t('Tag d2d_friendship is invalid for action "modify"');
    }
    else {
      $kcheck = array();
      $kcheck[] = array('mandatory' => array('d2d_id'), );
      $status = patterns_utils_check_keys($data, $kcheck, $msg);
    }
  }
  
  if ($status == PATTERNS_ERR) {
  	return patterns_results($status, $msg);	
  }
  
  // SEMANTIC VALIDATION
  
  if ($tag == 'd2d_public_key') {
  	$d2d_id = @$data['d2d_id'];
  	$public_key = @$data['public_key'];
  	
  	$public_key_short =  '...' . @d2d_substr_public_key($public_key);
  	
  	// $keys = @d2d_api_public_key_get($d2d_id);
  	
  	if ($action == PATTERNS_CREATE) {
  		
  		$instance = d2d_api_instance_get($d2d_id);

  		if ($instance === FALSE) {
  			$result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => 
        	t('No instance associated with key %k found.', array('%k' => $data['d2d_id'],)));
  		}
  		else if (d2d_api_public_key_exist($d2d_id, $public_key)) {
				$result[] = array(PATTERNS_WARNING_ALREADY_DEFINED_ELEMENT => 
        	t('Instance %i has already public key %k.', array('%i' => $d2d_id, '%k' => $public_key_short,)));
  		}
  	}
  	
  	else if ($action == PATTERNS_MODIFY) {  
  		$id = $data['id'];
  		// modify by id	
  		$key = d2d_api_public_key_get_by_id($id);
  			
  		if (empty($key)) {
  			$result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => 
        	t('No public key to modify with \'id\' :id', array(':id' => $id,)));
  		}	
  	}	
  	
  	else { // PATTERS_DELETE
  		// delete by id	
  		if (isset($data['id'])) {
  			$id = $data['id'];
  			$key = d2d_api_public_key_get_by_id($id);
  			
  			if (empty($key)) {
  				$result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => 
        		t('No public key to modify with \'id\' :id', array(':id' => $id,)));
  			}	
  		}
  		// pub_key and d2d_id are set
  		else if (!d2d_api_public_key_exist($d2d_id, $public_key)) { 
  			$result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => 
        		t('The pair instance-public key (%i-%k) was not found.', array('%i' => $d2d_id, '%k' => $public_key_short,)));
  		}	
  	}
  	
  }
  
  else if ($tag == 'd2d_own_keys') {
    // nothing
  }
  
  
  else if ($tag == 'd2d_permission') {
    $method_name = @$data['method'];
    $group_name = @$data['group'];
    
    if (isset($data['group_id'])) { // set in hook_prepare
      $group_id = $data['group_id'];
    }
    else {
      $group = d2d_api_group_get_by_name($group_name);
      $group_id = is_null($group) ? NULL : $group['id'];  
    }
    
    
    if (is_null($group_id)) {
      $result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED =>
          t('No group with name %name found.', array('%name' => $group_name,)));
    }
    else {
      
      $permissions = d2d_api_permission_get(TRUE);
      $perm_exist = isset($permissions[$group_id]['id'][$method_name]);
       
      if ($action == PATTERNS_CREATE) {
    
      		if ($perm_exist) {
      		  $result[] = array(PATTERNS_WARNING_ALREADY_DEFINED_ELEMENT =>
      		      t('Group "%name" has already the permission "%p".', array('%name' => group_name, '%p' => $method_name,)));
      		}
      }
       
      else { // DELETE
        if (!$perm_exist) {
          $result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED =>
              t('Group "%name" has no permission "%p".', array('%name' => group_name, '%p' => $method_name,)));
        }
        
      } 
    }
  }
  
  else if ($tag == 'd2d_friendship') {
    $d2d_id = @$data['d2d_id'];
    $instance_id = FALSE; // init value
      
    if ($data['instance_id'] == FALSE) { // set in hook_prepare
      $result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED =>
          t('No instance with name %id found.', array('%id' => $d2d_id,)));
    }
    else {  
      
      if ($action == PATTERNS_MODIFY) {
  
        if ($data['is_friend']) {
          $result[] = array(PATTERNS_WARNING_ALREADY_DEFINED_ELEMENT =>
              t('Instance "%d2d_id" is already marked as friend.', array('%d2d_id' => $d2d_id,)));
        }
      }
       
      else { // DELETE
        if (!$data['is_friend']) {
          $result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED =>
              t('Instance "%d2d_id" is not marked as friend.', array('%d2d_id' => $d2d_id,)));
        }
  
      }
    }
  }
  
  else if ($tag == 'd2d_group') {
      
    if ($action == PATTERNS_CREATE) {
      $group = d2d_api_group_get_by_name($data['name']);
      if (!is_null($group)) {
        $result[] = array(PATTERNS_WARNING_ALREADY_DEFINED_ELEMENT =>
            t('Group "%g" already existing.', array('%g' => $data['name'],)));
      }      
    }
    else { // modify, delete 
      
      $group = d2d_api_group_get_by_id($data['id']);
      
      if (is_null($group)) {
        $result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED =>
          t('Group with id "%id" not found.', array('%id' => $data['id'],)));
      }
    }
  }
  
  else if ($tag == 'd2d_instance') {
  
    if ($action == PATTERNS_CREATE) {
      $instance = d2d_api_instance_get($data['d2d_id']);
      if ($instance != FALSE) {
        $result[] = array(PATTERNS_WARNING_ALREADY_DEFINED_ELEMENT =>
            t('Instance with d2d_id "%d2d_id" already existing.', array('%d2d_id' => $data['d2d_id'],)));
      }
    }
    else { // modify, delete
  
      $group = d2d_api_instance_get_by_id($data['id']);
    
      if ($instance == FALSE) {
        $result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED =>
             t('Instance with id "%id" not found.', array('%id' => $data['id'],)));
      }
    }
  }
  	
  return patterns_results($status, $msg, $result);	
   
}
